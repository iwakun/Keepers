var isAndroid = /(android|silk)/i.test(navigator.userAgent);
var isIOS = /(iPod|iPhone|iPad)/i.test(navigator.userAgent);
var isBlackBerry = /blackberry/i.test(navigator.userAgent);
var isWindowsMobile = /Windows Phone/i.test(navigator.userAgent) || /IEMobile/i.test(navigator.userAgent);
var isUIWebView = /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(navigator.userAgent);
var isValidMobile = isAndroid || isWindowsMobile || isBlackBerry || (isIOS && !isUIWebView);
var isInvalidMobile = isIOS && isUIWebView;

var loadingImg = $('<span class="ajax-loader fa fa-refresh fa-spin">');

// JWPlayer commercial licence key
jwplayer.key = 'RAStLMmYG4haLCBTFRKw/ZeBTLsZg/K6ymauIQ==';

// Used by quizzes. This prevents errors.
LMSUnload = function() {}

// Global variables
var loggedErrors = [];
var gogo = {};
gogo.videos = [];
gogo.components = {};
gogo.clearAllTimers = function() {
    for(var i = 0; i < gogo.videos.length; i++) {
        if(typeof gogo.videos[i].timers != 'undefined') {
            clearInterval(gogo.videos[i].timers.logProgress);
        }
    }
};
gogo.debug = {
    log: function(string) {
        if(typeof GG_DEBUG !== 'undefined' && GG_DEBUG == true) {
            $('.debug-output').append(string);
        }
    },
    playerEventInit: function() {
        if(typeof GG_DEBUG !== 'undefined' && GG_DEBUG == true) {
        }
    },
    timerStart: function() {
        if(typeof GG_DEBUG !== 'undefined' && GG_DEBUG == true) {
            gogo.debug.currentTime = window.performance.now();
        }
    },
    logTime: function() {
        if(typeof GG_DEBUG !== 'undefined' && GG_DEBUG == true) {
            var newTime = window.performance.now();
            var seconds = (newTime - gogo.debug.currentTime) / 1000;
            gogo.debug.currentTime = newTime;
            gogo.debug.log('Time since last event: ' + seconds + 's' + "\n");
        }
    },
    currentTime: 0
};
gogo.Video = function(el) {
    var self = this
    self.el = $(el);
    self.url = false;
    if(self.el.data('videoid')) {
        self.source = 'remote';
    }
    if(self.el.data('link')) {
        self.source = 'local';
    }
    if(self.el.data('youtube')) {
        self.source = 'youtube';
    }
    if(self.el.prop('id')) {
        self.target = self.el.prop('id');
        self.width = self.el.width();
        self.height = self.el.height();
    } else {
        self.target = 'player';
        if($(window).width() > 600) {
            self.width = 640;
            self.height = 480;
        } else {
            self.width = $(window).width() - 10;
            self.height = self.width * ( 480 / 640 );
        }
    }
    if(
        self.el.data('no-track') == true ||
        self.source == 'local' ||
        self.source == 'youtube'
    ) {
        self.track = false;
    } else {
        self.track = true;
    }

    if(self.source == 'remote') {
        self.videoid = self.el.data('videoid');
        self.type = (isValidMobile) ? 'http' : 'rtmp';
        self.hasPermission;
    }
    if(self.track) {
        self.moduleid = self.el.data('moduleid');
        self.timers = {
            logProgress: false
        };
        self.timestamp = {
            start: 0
        };
    }
    self.el.on('click', function(e) {
        e.preventDefault();
        self.openVideoAndPlay();
    });
    gogo.debug.timerStart();
    gogo.debug.log('Source: ' + self.source + "\n");
    gogo.debug.log('Target: ' + self.target + "\n");
    gogo.debug.log('Track: ' + self.track + "\n");
    gogo.debug.log('Type: ' + self.type + "\n");
    gogo.debug.log('isValidMobile: ' + isValidMobile + "\n");
};
gogo.Video.prototype = {
    validate: function() {
        var self = this;
        var d = $.Deferred();
        // TODO: Check if invalid mobile
        if(self.source == 'local') {
            d.resolve();
        } else if(typeof(self.hasPermission) != 'undefined') {
            if(self.hasPermission) d.resolve();
            else d.reject();
        } else {
            $.ajax({
                url: '/includes/ajax/can-view-module.php',
                data: { 'id': self.moduleid },
                type: 'GET',
                dataType: 'json',
                success: function(data) {
                    if(data.canView) {
                        self.hasPermission = true;
                        d.resolve();
                    } else {
                        self.hasPermission = false;
                        d.reject('You do not have permsission to view this video. Please contact customer support');
                    }
                },
                error: function() {
                    d.reject('Unable to determine if you can view this video. Please contact customer support');
                }
            });
        }
        return d.promise();
    },
    openDialog: function() {
        var self = this;
        var d = $.Deferred();

        // If target isn't player then it's an inline video and doesn't open
        if(self.target != 'player') {
            d.resolve();
            return d.promise();
        }

        // Close dialog if it's open
        if($('.overlay-video').dialog('instance') !== undefined) {
            if($('.overlay-video').dialog('isOpen')) {
                $('.overlay-video').dialog('close');
            }
        }
        var overlayWidth;
        if($(window).width() > 700) {
            overlayWidth = '650';
        } else {
            overlayWidth = $(window).width();
        }
        $('.overlay-video').dialog({
            position: { "my": "center top", "at": "center top+5%" },
            width: overlayWidth,
            resizable: false,
            closeText: '&times;',
            open: function() {
                gogo.debug.log("openDialog: successful\n");
                d.resolve();
            },
            close: function() {
                self.closeDialog();
            }
        });
        return d.promise();
    },
    setUrl: function() {
        var self = this;
        var d = $.Deferred();
        if(self.url) {
            gogo.debug.log('URL: ' + self.url + "\n");
            d.resolve(self.url);
            return d.promise();
        }
        if(self.source == 'local') {
            self.url = self.el.data('link');
            gogo.debug.log('URL: ' + self.url + "\n");
            d.resolve(self.url);
        } else if(self.source == 'youtube') {
            self.url = 'http://www.youtube.com/watch?v=' + self.el.data('youtube');
            gogo.debug.log('URL: ' + self.url + "\n");
            d.resolve(self.url);
        } else if(self.type == 'rtmp') { // Return SMIL file for
            self.url = 'http://api.multicastmedia.com/ws/get_smilv2/od/rtmp/' + self.videoid + '.smil';
            gogo.debug.log('URL: ' + self.url + "\n");
            d.resolve(self.url);
        } else {
            $.ajax({
                url: '/includes/ajax/fetch-smil.php',
                data: {
                    id: self.videoid,
                    type: 'http'
                },
                dataType: 'xml',
                success: function(xml) {
                    if(xml !== null) {
                        gogo.debug.log("XML: " + xml.innerHTML + "\n");
                        var base = $(xml).find('meta[name="base"]').attr('base');
                        gogo.debug.log("Base: " + base + "\n");
                        videoUrl = $(xml).find('[width="360"]').attr('src');
                        if(!videoUrl) {
                            videoUrl = $(xml).find('[width="320"]').attr('src');
                        }
                        if(!videoUrl) {
                            videoUrl = $(xml).find('[width="640"]').attr('src');
                        }
                        if(!videoUrl) {
                            gogo.debug.log("Error: Video URL not found\n");
                            d.reject('Video Url was not found. Please contact customer support');
                            return false;
                        }
                        if(videoUrl.indexOf('?') != -1) {
                            videoUrl = videoUrl.substr(0, videoUrl.indexOf('?'));
                        }
                        videoUrl = base + videoUrl;
                        self.url = videoUrl;
                        gogo.debug.log('URL: ' + self.url + "\n");
                        gogo.logTime();
                        d.resolve(self.url);
                    } else {
                        d.reject('No XML info found for file. Please contact customer support');
                    }
                },
                error: function(data) {
                    gogo.debug.log("Error: Unable to get url\n");
                    gogo.debug.log("Error data: " + JSON.stringify(data) + "\n");
                    d.reject('Unable to get URL for video. Please contact customer support');
                }
            });
        }
        return d.promise();
    },
    closeDialog: function() {
        var self = this;
        jwplayer(self.target).stop();
        if(self.track) {
            self.stopTimer();
            clearInterval(self.timers.logProgress);
            gogo.clearAllTimers();
            gogo.debug.log("Action: Close dialog\n");
            setTimeout(function() {
                $('[data-component="transcript"]').trigger('fetch-transcript');
            }, 1000);
        }
    },
    playVideo: function(seek) {
        var self = this;
        var options = {
            autostart: true,
            width: self.width,
            height: self.height,
            primary: 'flash'
        }
        if(self.source == 'remote') {
            options.playlist = [{
                file: self.url,
                provider: '/js/lib/jwplayer/AkamaiAdvancedJWStreamProvider.swf',
                type:'mp4'
            }];
        }
        if(self.source == 'youtube') {
            options.playlist = [{
                file: self.url
            }];
        }
        if(self.source == 'local') {
            options.playlist = [{
                file: self.url
            }];
        }
        gogo.debug.log('jwPlayer options: ' + JSON.stringify(options) + "\n");
        gogo.debug.logTime();
        jwplayer(self.target).setup(options);
        self.timestamp.start = 0;
        if(self.track) {
            self.setTimers();
            log(GLOBAL_UserID, 'gogogh_module', self.moduleid);
        }
        if(seek) {
            self.hasJumped = false;
            self.jumpTimer = setInterval(function() {
                if(!self.hasJumped) {
                    gogo.debug.log('Jump to position: ' + seek + "\n");
                    if(jwplayer(self.target).getState() == 'PLAYING') {
                        jwplayer(self.target).seek(seek);
                        self.hasJumped = true;
                        clearInterval(self.jumpTimer);
                    }
                }
            }, 1000);
        }
    },
    setTimers: function() {
        var self = this;
        gogo.clearAllTimers();

        jwplayer(self.target).onPlay(function(e) {
            gogo.debug.log('jwPlayer event - play' + "\n");
            if(typeof e !== 'undefined') {
                gogo.debug.log(JSON.stringify(e) + "\n");
            }
            gogo.debug.logTime();
        });
        jwplayer(self.target).onBuffer(function(e) {
            gogo.debug.log('jwPlayer event - buffer' + "\n");
            if(typeof e !== 'undefined') {
                gogo.debug.log(JSON.stringify(e) + "\n");
            }
            gogo.debug.logTime();
        });
        jwplayer(self.target).onBufferChange(function(e) {
            gogo.debug.log('jwPlayer event - bufferChange' + "\n");
            if(typeof e !== 'undefined') {
                gogo.debug.log(JSON.stringify(e) + "\n");
            }
            gogo.debug.logTime();
        });
        jwplayer(self.target).onQualityLevels(function(e) {
            gogo.debug.log('jwPlayer event - qualityLevels' + "\n");
            if(typeof e !== 'undefined') {
                gogo.debug.log(JSON.stringify(e) + "\n");
            }
            gogo.debug.logTime();
        });
        jwplayer(self.target).onQualityChange(function(e) {
            gogo.debug.log('jwPlayer event - qualityChange' + "\n");
            if(typeof e !== 'undefined') {
                gogo.debug.log(JSON.stringify(e) + "\n");
            }
            gogo.debug.logTime();
        });
        jwplayer(self.target).onComplete(function(e) {
            gogo.debug.log('jwPlayer event - complete' + "\n");
            if(typeof e !== 'undefined') {
                gogo.debug.log(JSON.stringify(e) + "\n");
            }
            gogo.debug.logTime();
            self.stopTimer()
        });
        jwplayer(self.target).onSeek(function(e) {
            gogo.debug.log('jwPlayer event - seek' + "\n");
            if(typeof e !== 'undefined') {
                gogo.debug.log(JSON.stringify(e) + "\n");
            }
            gogo.debug.logTime();
            self.timeSeek(Math.floor(e.offset));
        });
        jwplayer(self.target).onError(function(e) {
            gogo.debug.log('jwPlayer event - error' + "\n");
            if(typeof e !== 'undefined') {
                gogo.debug.log(JSON.stringify(e) + "\n");
            }
            gogo.debug.logTime();
            self.stopTimer()
        });
        self.timers.logProgress = setInterval(function() {
            self.logViewTime()
        }, 120000); // Every two minutes
        gogo.debug.log("Setting Timers\n");
        $(window).off('.video').on('unload.video', function() { self.stopTimer() });
    },
    stopTimer: function() {
        var self = this;
        gogo.debug.log("Timer: Stop Timer\n");
        if(self.track) {
            clearInterval(self.timers.logProgress);
            self.logViewTime();
        }
    },
    timeSeek: function(newTime) {
        var self = this;
        gogo.debug.log("Action: Seek\n");
        if(self.track) {
            self.logViewTime();
            self.timestamp.start = newTime;
            gogo.debug.log("New time: " + newTime + "\n");
        }
    },
    logViewTime: function() {
        var self = this;
        var viewInfo;
        var duration = jwplayer(self.target).getDuration();
        var current = jwplayer(self.target).getPosition();
        if((current - self.timestamp.start) > 10 && duration > 0) {
            viewInfo =
                Math.floor(self.timestamp.start) + ":" +
                Math.floor(current) + ":" +
                Math.floor(duration);
            log(GLOBAL_UserID, 'gogogh_module_view', self.moduleid, viewInfo);
        } else {
            gogo.debug.log('Time not recorded (too short): ' + (current - self.timestamp.start) + "\n");
        }
    },
    openVideoAndPlay: function(seek) {
        var self = this;
        $.when(self.validate())
            .then(
                function() { return self.openDialog(); },
                function(errorMsg) {
                    gogo.debug.log('Error: ' + errorMsg + "\n");
                    alert(errorMsg);
                }
            )
            .then(
                function() { return self.setUrl(); },
                function() {
                    gogo.debug.log("Error: Unable to open dialog\n");
                    alert('Unable to open dialog. Please contact customer support');
                }
            )
            .then(
                function() { self.playVideo(seek); },
                function(errorMsg) {
                    gogo.debug.log("Error: Unable to play video\n");
                    alert(errorMsg);
                }
            );
    }
};

// Mobile menu
gogo.Drawer = function(el) {
    var self = this;
    self.el = jQuery(el);
    self.toggle = self.el.find('[data-drawer="toggle"]');
    self.content = self.el.find('[data-drawer="content"]');
}
gogo.Drawer.prototype = {
    init: function() {
        var self = this;
        self.reset();
        self.isOpen = false;
        self.toggle.off('.drawer').on('click.drawer', function() {
            event.preventDefault();
            if(self.isOpen) {
                self.close();
            } else {
                self.open();
            }
        });
    },
    resize: function() {
        var self = this;
        if(self.isOpen) {
            self.content.css('height', jQuery(document).height());
        } else {
            self.reset();
        }
    },
    open: function() {
        var self = this;
        self.content.css('height', jQuery(document).height());
        self.el.addClass('open');
        self.isOpen = true;
    },
    close: function() {
        var self = this;
        self.el.removeClass('open');
        setTimeout(function() { self.reset() }, 500);
        self.isOpen = false;
    },
    reset: function() {
        var self = this;
        self.el.removeClass('open');
        self.content.css('height', 0);
    },
    destroy: function() {
        var self = this;
        self.reset();
        self.toggle.off('.drawer');
    }
}

// QA Section in course page
gogo.contentDrawer = function(el) {
    var self = this;
    self.el = $(el);
    self.drawers = [];
    self.default = self.el.find('[data-cd="default"]');
    self.el.find('[data-cd="drawer"]').each(function() {
        self.drawers.push({
            id: $(this).data('cd-id'),
            el: $(this)
        });
    });
    self.current = false;
    self.init();
};
gogo.contentDrawer.prototype = {
    init: function() {
        var self = this;
        for(var i = 0; i < self.drawers.length; i++) {
            var inner = $('<div data-cd="drawer-inner"></div>');
            inner.css({
                'height': self.el.outerHeight(),
                'width': self.el.outerWidth()
            });
            self.drawers[i].close = $('<div data-cd="close">&times;</div>');
            self.drawers[i].close.on('click', function() {
                self.close();
            });
            self.drawers[i].el.wrapInner(inner);
            self.drawers[i].el.find('[data-cd="drawer-inner"]').append(self.drawers[i].close);
            self.drawers[i].el.css({
                'height': self.el.outerHeight(),
                'width': 0,
                'opacity': 1
            });
        }
        $('[data-cd="open"]').on('click', function() {
            var id = $(this).data('target');
            self.open(id);
        });
    },
    open: function(id) {
        var self = this;
        for(var i = 0; i < self.drawers.length; i++) {
            if(self.drawers[i].id == id) {
                self.drawers[i].el.animate({ 'width': self.drawers[i].el.parent().width() }, 300);
                self.current = i;
            }
        }
    },
    close: function() {
        var self = this;
        self.drawers[self.current].el.animate({ 'width': 0 }, 100);
        self.current = false;
    }
};

gogo.Responsive = {
    current: false,
    init: function() {
        var self = this;
        self.resize();
        jQuery(window).on('resize.responsive', function() {
            self.resize();
        });
        if(isValidMobile) {
            jQuery('[data-responsive="desktop-only-link"]').each(function() {
                var p = jQuery(this).parent();
                var text = jQuery(this).text();
                text = text + ' (Online Quizzes only available on PCs/Macs)';
                jQuery(this).remove();
                p.append(text);
            });
        }
    },
    resize: function() {
        var self = this;
        var w = jQuery(window);
        if(w.width() >= 1000) {
            if(self.current != 'desktop') {
                if(self.current == 'mobile') {
                    self.current = 'desktop';
                    self.mobileDestroy();
                }
                self.desktopInit();
            }
        } else {
            if(self.current != 'mobile') {
                if(self.current == 'desktop') {
                    self.current = 'mobile';
                    self.desktopDestroy();
                }
                self.mobileInit();
            }
        }
    },
    desktopInit: function() {
    },
    desktopDestroy: function() {
    },
    mobileInit: function() {
        gogo.components.drawer.init();
    },
    mobileDestroy: function() {
        gogo.components.drawer.destroy();
    }
};

gogo.Form = function(el) {
    var self = this;
    self.el = $(el);
    self.checkboxes = self.el.find('input[type="checkbox"]:not(.no-alter)');
    self.radios = self.el.find('input[type="radio"]');
    self.checkboxes.each(function() {
        var el = this;
        $(el)
            .wrap('<span class="form-checkbox">')
            .on('change', function() { self.update(el); });
        self.update(el);
    });
    self.radios.each(function() {
        var el = this;
        $(el)
            .wrap('<span class="form-radio">')
            .on('change', function() { self.update(el); });
        self.update(el);
    });
}
gogo.Form.prototype = {
    update: function(el) {
        var self = this;
        if($(el).attr('type') == 'radio') {
            if(el.checked) {
                var name = $(el).attr('name');
                self.el.find('[name="' + name + '"]').parent().removeClass('active');
                $(el).parent().addClass('active');
            } else {
                $(el).parent().removeClass('active');
            }
        }
        if($(el).attr('type') == 'checkbox') {
            if(el.checked) {
                $(el).parent().addClass('active');
            } else {
                $(el).parent().removeClass('active');
            }
        }
    }
}

gogo.Accordion = function(accordion) {
    var self = this;
    self.el = jQuery(accordion);
    self.el.data('accordionFunction', self);
    self.link = self.el.find('> [data-accordion="link"]');
    self.content = self.el.find('> [data-accordion="content"]');
    self.init();
};
gogo.Accordion.prototype = {
    init: function() {
        var self = this;
        // If there are tabs, initialize those first
        if(self.content.find('[data-component="tabs-in-accordion"]').length > 0) {
            self.content.find('[data-component="tabs-in-accordion"]').tabs();
        }
        self.el.on('toggle.accordion', function() {
            if(self.isOpen) {
                self.close();
            } else {
                self.openInit();
            }
        });
        setTimeout(function() {
            self.origheight = self.content.height();
            self.content.css("height", 0);
            self.isOpen = false;
            self.link.on('click.accordion', function(e) {
                e.preventDefault();
                e.stopPropagation();
                if(self.isOpen) {
                    self.close();
                } else {
                    self.openInit();
                }
            });
            self.el.css("opacity", 1);
            self.el.css("height", "auto");
        }, 0);
    },
    openInit: function() {
        var self = this;
        self.el.siblings('[data-component="accordion"]').each(function() {
            jQuery(this).data('accordionFunction').closeAll();
        });
        self.open();
    },
    open: function() {
        var self = this;
        self.el.addClass('open');
        self.content.css("height", self.origheight);
        setTimeout(function() {
            self.content.css('height', 'auto');
        }, 300);
        self.isOpen = true;
    },
    close: function() {
        var self = this;
        self.el.removeClass('open');
        self.content.css('height', self.content.height()); // Remove "height: auto"
        setTimeout(function() {
            self.content.css("height", 0);
        },10);
        if(self.content.find('[data-component="tabs-in-accordion"]').length > 0) {
            self.content.find('[data-component="tabs-in-accordion"]').tabs('option', 'active', 0);
        }
        self.isOpen = false;
    },
    closeAll: function() {
        var self = this;
        self.el.removeClass('open');
        self.isOpen = false;
        self.el.find('[data-component="accordion"]').each(function() {
            jQuery(this).data('accordionFunction').closeAll();
        });
        self.content.css("height", 0);
    }
};

gogo.message = function(el) {
    var self = this;
    self.el = $(el);
    if(self.el.find('[data-message="content"]').length > 0) {
        self.messageInit();
        self.init();
    }
};
gogo.message.prototype = {
    messageInit: function() {
        var self = this;
        self.content = self.el.find('[data-message="content"]');
        self.content.wrap('<div data-message="content-container"></div>');
        self.closeButton = $('<div data-message="close">&times;</div>');
        self.content.append(self.closeButton);
    },
    init: function() {
        var self = this;
        self.originalHeight = self.el.height();
        self.el.find('[data-message="content-container"]').css({
            'position': 'absolute',
            'bottom': '0'
        });
        self.el.css({ 'opacity': 1, 'height': 0 });
        self.closeButton.on('click', function() {
            self.close();
        });
        self.el.animate({ 'height': self.originalHeight }, 300);
    },
    close: function() {
        var self = this;
        self.el.animate({ 'height': 0 }, 100);
    },
    addMessage: function(type, message) {
        var self = this;
        var message = $('<div class="' + type + '"><ul><li>' + message + '</li></ul></div>');
        if(typeof self.content == 'undefined') {
            var container = $('<div class="gg-messages-inner" data-message="content"></div>');
            container.append(message);
            self.el.append(container);
        } else {
            self.content.append(message);
        }
        self.messageInit();
        self.init();
    }
};

gogo.parallaxBackground = function(el) {
    var self = this;
    self.el = $(el);
    self.image = new Image();
    self.image.src = self.el.css('background-image').replace('url("', '').replace('")', '');
    self.image.onload = function() { self.init(); }
    self.mask = $('<div data-pb="mask">');
    self.el.append(self.mask);
};
gogo.parallaxBackground.prototype = {
    init: function() {
        var self = this;
        self.ratio = self.image.width / self.image.height;
        self.resize();
        $(window).on({
            'resize.parallaxBackground': function() {
                self.resize();
            },
            'scroll.parallaxBackground': function() {
                self.scroll();
            }
        });
        self.el.css('opacity', 1);
    },
    resize: function() {
        var self = this;
        self.el.css('height', $(window).height());
        self.ratio = ((self.image.height / self.image.height) * self.el.width()) / $(document).height();
    },
    scroll: function() {
        var self = this;
        var movement = $(window).scrollTop() * self.ratio * -1;
        self.el.css('background-position', '0 ' + movement + 'px');
    }
};

gogo.transcript = function(el) {
    var self = this;
    self.el = $(el);
    self.courseId = self.el.data('transcript-course-id');
    self.init();
    self.width = 100;
};
gogo.transcript.prototype = {
    init: function() {
        var self = this;
        self.fetch();
        self.el.on('fetch-transcript', function() {
            self.fetch();
        });
    },
    fetch: function() {
        var self = this;
        $.ajax({
            url: '/includes/ajax/get-transcript.php',
            data: { 'id': self.courseId },
            dataType: 'json',
            success: function(data) {
                console.log(data);
                for(var i = 0; i < data.modules.length; i++) {
                    var moduleHtml = self.el.find('[data-transcript-module-id="' + data.modules[i].id + '"]');
                    var bar = $('<span class="data-transcript-bar"></span>');
                    for(var j = 0; j < data.modules[i].viewtimes.length; j++) {
                        var chunk = $('<span class="data-transcript-chunk"></span>');
                        chunk.data({
                            'seek': data.modules[i].viewtimes[j].seek,
                            'id': data.modules[i].id
                        });
                        chunk.css({
                            'left': (data.modules[i].viewtimes[j].start) * self.width,
                            'width': (data.modules[i].viewtimes[j].length) * self.width
                        });
                        chunk.on('click', function() {
                            for(var k = 0; k < gogo.videos.length; k++) {
                                if(gogo.videos[k].moduleid == $(this).data('id')) {
                                    gogo.videos[k].openVideoAndPlay($(this).data('seek'));
                                }
                            }
                        });
                        var info = $('<span class="data-transcript-info"></span>');
                        info.text(data.modules[i].viewtimes[j].end_time);
                        chunk.append(info);
                        bar.append(chunk);
                    }
                    moduleHtml.find('[data-transcript="bar"]').empty().append(bar);

                    var percentage = $('<span class="data-transcript-percentage"></span>');
                    percentage.text(data.modules[i].percent_viewed + '%');
                    moduleHtml.find('[data-transcript="percentage"]').empty().append(percentage);
                }
                var totalHtml = self.el.find('[data-transcript="total"]');
                var bar = $('<span class="data-transcript-bar"></span>');
                var chunk = $('<span class="data-transcript-chunk"></span>');
                chunk.css({
                    'left': 0,
                    'width': data.total_percent * self.width
                });
                bar.append(chunk);
            }
        });
    }
};

gogo.headerSearch = function(el) {
    var self = this;
    self.el = $(el);
    self.trigger = self.el.find('[data-hs="trigger"]');
    self.content = self.el.find('[data-hs="content"]');
    self.closeButton = self.el.find('.close');
    self.originalWidth = 235;
    self.responsiveBreakpoint = 1000;
    self.responsiveCurrent = false;
    self.init();
};
gogo.headerSearch.prototype = {
    init: function() {
        var self = this;
        $(window).on('resize.headerSearch', function() {
            self.resize();
        });
        self.resize();
    },
    desktopInit: function() {
        var self = this;
        self.content.width(0);
        self.isOpen = false;
        self.trigger.on('click.headerSearch', function() {
            event.preventDefault();
            if(self.isOpen) {
                self.search();
            } else {
                self.open();
            }
        });
        self.closeButton.on('click', function() {
            self.close();
        });
    },
    desktopDestroy: function() {
        var self = this;
        self.trigger.off('.headerSearch');
    },
    open: function() {
        var self = this;
        self.content.width(self.originalWidth);
        self.isOpen = true;
    },
    close: function() {
        var self = this;
        self.content.width(0);
        self.isOpen = false;
    },
    search: function() {
        var self = this;
        self.el.submit();
    },
    resize: function() {
        var self = this;
        var ww = $(window).width();
        if(ww >= self.responsiveBreakpoint) {
            if(self.responsiveCurrent != 'desktop') {
                if(self.responsiveCurrent == 'mobile') {
                    self.responsiveCurrent = 'desktop';
                }
                self.desktopInit();
            }
        } else {
            if(self.responsiveCurrent != 'mobile') {
                if(self.responsiveCurrent == 'desktop') {
                    self.responsiveCurrent = 'mobile';
                    self.desktopDestroy();
                }
            }
        }
    }
};

gogo.headerShrink = function(el) {
    var self = this;
    self.el = $(el);
    self.shrinkOn = 150;
    self.init();
};
gogo.headerShrink.prototype = {
    init: function() {
        var self = this;
        window.addEventListener('scroll', function(e) {
            var distanceY = window.pageYOffset || document.documentElement.scrollTop;
            if (distanceY > self.shrinkOn) {
                self.el.addClass('shrunk');
            } else {
                if (self.el.hasClass('shrunk')) {
                    self.el.removeClass('shrunk');
                }
            }
        });
    }
};

gogo.overlay = function(el) {
    var self = this;
    self.el = $(el);
    self.content = self.el.find('[data-overlay-content]');
    self.contentHeader = self.content.find('[data-overlay-header]');
    self.contentBody = self.content.find('[data-overlay-body]');
    self.init();
};
gogo.overlay.prototype = {
    init: function() {
        var self = this;
        self.el.on('click', function() {
            var overlayWidth;
            if($(window).width() > 600) {
                overlayWidth = 600;
            } else {
                overlayWidth = $(window).width();
            }
            $('[data-overlay]').dialog({
                position: { "my": "center top", "at": "center top+5%" },
                width: overlayWidth,
                modal: true,
                resizable: false,
                closeText: '&times;',
                open: function(event, ui) {
                    if(self.contentHeader) {
                        $(this).find('[data-overlay-header]').show().empty().append(self.contentHeader.clone());
                    } else {
                        $(this).find('[data-overlay-header]').hide();
                    }
                    if(self.contentBody) {
                        $(this).find('[data-overlay-body]').show().empty().append(self.contentBody.clone());
                    } else {
                        $(this).find('[data-overlay-body]').empty().append(self.content.clone());
                    }
                    setTimeout(function() {
                        var $target = $(event.target);
                        var maxHeight = $(window).height() - ($(window).height() * .3);
                        $target.find('[data-overlay-body]').css('max-height', maxHeight);
                    }, 0);
                }
            });
        });
    }
};

gogo.purchaseOption = function(el) {
    var self = this;
    self.el = $(el);
    self.price = self.el.find('.price span');
    self.course = self.el.data('po-course');
    self.option = self.el.find('[name="purchase_option"]:checked').data('po-option');
    self.init();
};
gogo.purchaseOption.prototype = {
    init: function() {
        var self = this;
        self.el.find('[type="submit"]').on('click', function(e) {
            e.preventDefault();
            self.submitForm();
        });
    },
    submitForm: function() {
        var self = this;
        self.option = self.el.find('[name="purchase_option"]:checked').data('po-option');
        var url = '/shop?item=course|' + self.course + ':' + self.option;
        window.location.href = 'http://' + window.location.hostname + url;
    }
};

// Used by reCAPTCHA
var gogoCaptcha = function() {
    $('[data-component="captcha"]').each(function() {
        grecaptcha.render(this, {
            'sitekey': "6LdrC8gSAAAAAOjoe463UGiulyW0zyDmh8DiD-_u"
        });
    });
}

// TODO: Componentize this code
// jValidate() : Validation function for forms
function jValidate(form) {
    form = $(form);
    form.find('.notice').html(loadingImg);
    var errors = new Array();
    var valid = true;
    form.find('input.validate').each(function() {
        if($(this).val().trim() == '') {
            $(this).css({
                border: '1px solid red'
            });
            valid = false;
        }
    });
    form.find('textarea.validate').each(function() {
        if($(this).val().trim() == '') {
            $(this).css({
                border: '1px solid red'
            });
            valid = false;
        }
    });
    form.find('select.validate').each(function() {
        if($(this).val() == '' || $(this).val() == '0' || $(this).val() == '--') {
            $(this).css({
                border: '1px solid red'
            });
            valid = false;
        }
    });
    if(!valid) errors.push('Please fill out all required fields');
    if(form.find('[name="Password"]').length != 0 && form.find('[name="Password2"]').length != 0) {
        if(form.find('[name="Password"]').val() != form.find('[name="Password2"]').val()) {
            valid = false;
            form.find('[name="Password"]').css({
                border: '1px solid red'
            });
            form.find('[name="Password2"]').css({
                border: '1px solid red'
            });
            errors.push('Passwords must match');
        }
    }
    form.find('.validate-checked:not(:checked)').each(function() {
        valid = false;
        errors.push("Please check the required checkboxes");
        $(this).parent('label').css({
            color: 'red'
        });
    });
    if(!valid) {
        for(var i = 0; i < errors.length; i++) {
            form.find('.notice').html('');
            form.find('.notice').append(errors[i] + "<br />");
        }
        return false;
    }
    return true;
}

// TODO: Componentize this code
// log() : Used to log events dynamically
function log(userid, type, id, info) {
    if(typeof info == 'undefined') info = '';
    $.ajax({
        url:  '/includes/log_process.php',
        type: 'GET',
        data: {
            userid: userid,
            type: type,
            id: id,
            info: info
        },
        dataType: 'json',
        success: function(data) {
            gogo.debug.log("Log: successful\n");
            gogo.debug.log("Log type: " + type + "\n");
            gogo.debug.log("Log id: " + id + "\n");
            gogo.debug.log("Log info: " + info + "\n");
            gogo.debug.log('Data: ' + JSON.stringify(data) + "\n");
            if(data.status != 1) {
                if(data.type == 'gogogh_module_view') {
                    gogo.debug.log('Error: ' + data.msg + "\n");
                    gogo.debug.log('Data: ' + JSON.stringify(data) + "\n");
                    logMessage('error', data.msg);
                }
            }
        },
        error: function(data) {
            gogo.debug.log("Error: Unable to log\n");
            gogo.debug.log('Data: ' + JSON.stringify(data) + "\n");
            logMessage('error', 'Unable to connect to server. Any viewing activity will not be logged.');
        }
    });
}
function logMessage(type, msg) {
    var isLogged = false;
    for(var i = 0; i < loggedErrors.length; i++) {
        if(loggedErrors[i] == msg) {
            isLogged = true;
        }
    }
    if(!isLogged) {
        loggedErrors.push(msg);
        $('.gg-messages').append('<div class="' + type + '"><ul><li>' + msg + '</li></ul></div>');
    }
}

$(document).ready(function() {
    $('[data-component="video"]').each(function() {
        gogo.videos.push(new gogo.Video(this));
    });
    $('[data-component="drawer"]').each(function() {
        gogo.components.drawer = new gogo.Drawer(this);
    });
    $('[data-component="accordion"]').each(function() {
        gogo.components.accordion = new gogo.Accordion(this);
    });
    $('[data-component="parallax-background"]').each(function() {
        var background = new gogo.parallaxBackground(this);
    });
    $('[data-component="message"]').each(function() {
        gogo.globalMessages = new gogo.message(this);
    });
    $('[data-component="content-drawer"]').each(function() {
        var contentDrawer = new gogo.contentDrawer(this);
    });
    $('[data-component="header-search"]').each(function() {
        var headerSearch = new gogo.headerSearch(this);
    });
    $('.form').each(function() {
        var form = new gogo.Form(this);
    });
    $('[data-component="overlay"]').each(function() {
        var overlay = new gogo.overlay(this);
    });
    $('[data-component="transcript"]').each(function() {
        var transcript = new gogo.transcript(this);
    });
    $('[data-component="header-shrink"]').each(function() {
        var headerShrink = new gogo.headerShrink(this);
    });
    $('[data-component="purchase-option"]').each(function() {
        var purchaseOption = new gogo.purchaseOption(this);
    });
    $('[data-action="quiz-link"]').on('click', function(e) {
        e.preventDefault();
        var self = this;
        $('.overlay-quiz').dialog({
            position: { "my": "center top", "at": "center top+5%" },
            width: 750,
            resizable: false,
            closeText: '&times;',
            open: function() {
                var iframe = $('<iframe />')
                    .attr('src', $(self).attr('data-href'))
                    .css({ 'width' : 730, 'height' : 550 });
                $(this).empty().append(iframe);
            }
        });
    });
    $('[data-action="overlay-faq"]').on('click', function(e) {
        e.preventDefault();
        var overlayWidth;
        if($(window).width() > 700) {
            overlayWidth = '650';
        } else {
            overlayWidth = $(window).width();
        }
        $('.overlay-faq').dialog({
            position: { "my": "center top", "at": "center top+5%" },
            width: overlayWidth,
            modal: true,
            resizable: false,
            closeText: '&times;'
        });
    });
    $(document).on('click', '[data-action="overlay-register"]', function(e) {
        e.preventDefault();
        var overlayWidth;
        if($(window).width() > 700) {
            overlayWidth = '650';
        } else {
            overlayWidth = $(window).width();
        }
        $('.overlay-register').dialog({
            position: { "my": "center top", "at": "center top+5%" },
            width: overlayWidth,
            modal: true,
            resizable: false,
            closeText: '&times;'
        });
    });
    $(document).on('click', '[data-action="purchase-options"]', function(e) {
        e.preventDefault();
        var overlayWidth;
        if($(window).width() > 700) {
            overlayWidth = '650';
        } else {
            overlayWidth = $(window).width();
        }
        $($(this).attr('rel')).dialog({
            position: { "my": "center top", "at": "center top+5%" },
            width: overlayWidth,
            modal: true,
            resizable: false,
            closeText: '&times;',
        });
    });

    if($('[data-component="tabs"]').length > 0) $('[data-component="tabs"]').tabs();
    gogo.Responsive.init();

    $('form.jValidate').on('submit', function(e) {
        return jValidate(this);
    });

    if($('.free-course-link').hasClass('expanded')) {
        setTimeout(function() {
            $('.free-course-link').removeClass('expanded');
        }, 1000);
    }

    // Trigger accordion if needed
    if(typeof window.location.hash != 'undefined') {
        if(window.location.hash.indexOf('/') == -1) {
            $(window.location.hash).trigger('toggle');
        }
    }
});
