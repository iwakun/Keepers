import { Component, Input, trigger, state, style, transition, animate, NgZone } from '@angular/core';
import { MacuSliderComponent } from './shared/slider.component';
import { MacuDropdownValue, MacuDropdownComponent } from './shared/dropdown.component';
import { Api } from './shared/api.service';
import { MoneyFormatPipe } from './shared/moneyFormat.pipe';

@Component({
    selector: 'macu-app',
    templateUrl: 'app/app.component.html',
    directives: [ MacuSliderComponent, MacuDropdownComponent ],
    providers: [ Api ],
    pipes: [ MoneyFormatPipe ],
    animations: [
        trigger('houseState', [
            state('appear', style({ opacity: '1', marginTop: '150px' })),
            state('moveup', style({ marginTop: '0' })),
            state('inactive', style({ marginTop: '150px', opacity: '0' })),
            transition('inactive => appear, appear => moveup', animate('500ms ease-out'))
        ]),
        trigger('pageState', [
            state('active', style({ opacity: '1' })),
            state('inactive', style({ opacity: '0' })),
            transition('inactive => active', animate('500ms ease-out'))
        ]),
        trigger('mobilePage', [
            state('home', style({ height: '100vh' })),
            state('details', style({ height: '130px' })),
            transition('home => details', animate('500ms ease-out')),
            transition('details => home', animate('500ms ease-out'))
        ]),
        trigger('mobilePageHome', [
            state('active', style({ opacity: '1' })),
            state('inactive', style({ opacity: '0' })),
            transition('inactive => active', animate('200ms ease-out')),
            transition('active => inactive', animate('200ms ease-out'))
        ]),
        trigger('mobilePageBack', [
            state('active', style({ opacity: '1' })),
            state('inactive', style({ opacity: '0' })),
            transition('inactive => active', animate('200ms ease-out')),
            transition('active => inactive', animate('200ms ease-out'))
        ])
    ]
})
export class AppComponent {
    loanTypes:any = [];
    currentPage:string = 'home';
    currentLoanType:any;
    currentLoanOption:any;
    isMobile:boolean = false;
    hasSubmitted:boolean = false;
    animationState:any = {
        house: 'inactive',
        page: 'inactive',
        mobilePage: 'home',
        mobilePageHome: 'active',
        mobilePageBack: 'inactive'
    };
    inputs:any = {
        loanPurpose: {
            hint: 'Hint Text',
            currentValue: false,
            invalidText: 'Please choose a Loan Purpose',
            disabled: false,
            values: []
        },
        loanProduct: {
            hint: 'Hint Text',
            currentValue: false,
            invalidText: 'Please choose a Loan Type',
            disabled: false,
            values: []
        },
        state: {
            hint: 'Hint Text',
            currentValue: false,
            invalidText: 'Please choose a State',
            disabled: false,
            values: []
        },
        county: {
            hint: 'Hint Text',
            currentValue: false,
            currentState: false,
            invalidText: 'Please choose a County',
            disabled: true,
            values: []
        },
        creditScore: {
            hint: 'Hint Text',
            currentValue: false,
            invalidText: 'Please choose a Credit Score',
            disabled: false,
            values: []
        },
        propertyType: {
            hint: 'Hint Text',
            currentValue: false,
            invalidText: 'Please choose a Property Type',
            disabled: false,
            values: []
        },
        targetRate: {
            hint: 'Hint Text',
            currentValue: false,
            invalidText: 'Please choose a Target Rate',
            disabled: false,
            values: [
                { id: 2.0, name: '2.0%' },
                { id: 2.125, name: '2.125%' },
                { id: 2.25, name: '2.25%' },
                { id: 2.375, name: '2.375%' },
                { id: 2.5, name: '2.5%' },
                { id: 2.675, name: '2.675%' },
                { id: 2.75, name: '2.75%' },
                { id: 2.875, name: '2.875%' },
                { id: 3.0, name: '3.0%' },
                { id: 3.125, name: '3.125%' },
                { id: 3.25, name: '3.25%' },
                { id: 3.375, name: '3.375%' },
                { id: 3.5, name: '3.5%' },
                { id: 3.675, name: '3.675%' },
                { id: 3.75, name: '3.75%' },
                { id: 3.875, name: '3.875%' },
                { id: 4.0, name: '4.0%' },
                { id: 4.125, name: '4.125%' },
                { id: 4.25, name: '4.25%' },
                { id: 4.375, name: '4.375%' },
                { id: 4.5, name: '4.5%' },
                { id: 4.675, name: '4.675%' },
                { id: 4.75, name: '4.75%' },
                { id: 4.875, name: '4.875%' },
                { id: 5.0, name: '5.0%' }
            ]
        },
        targetPoints: {
            hint: 'Hint Text',
            currentValue: false,
            invalidText: 'Please choose Target Points',
            values: [
                { id: 0, name: '0 points' },
                { id: 0.5, name: 'Up to .5 points' },
                { id: 1, name: 'Up to 1 points' },
                { id: 1.5, name: 'Up to 1.5 points' },
                { id: 2, name: 'Up to 2 points' },
                { id: 2.5, name: 'Up to 2.5 points' },
                { id: 3, name: 'Up to 3 points' },
                { id: 4, name: 'Up to 4 points' },
                { id: 4.5, name: 'Up to 4.5 points' },
                { id: 5, name: 'Up to 5 points' }
            ]
        },
        propertyValue: {
            currentValue: '',
            invalidText: 'Please input a Property Value',
            hint: 'Hint Text'
        },
        loanAmount: {
            currentValue: '',
            invalidText: 'Please input a Loan Amount',
            hint: 'Hint Text'
        },
        name: {
            currentValue: '',
            invalidText: 'Please input a Name',
            hint: 'Hint Text'
        },
        email: {
            currentValue: '',
            invalidText: 'Please input an Email',
            hint: 'Hint Text'
        }
    };
    api:any;
    date:any;

    constructor(private apiService:Api, ngZone:NgZone) {
        this.api = this.apiService.getInstance();
        this.inputs.loanPurpose.values = this.api.getLoanPurposeOptions();
        this.inputs.loanProduct.values = this.api.getLoanProductOptions();
        this.inputs.state.values = this.api.getStateOptions();
        this.inputs.creditScore.values = this.api.getCreditScoreOptions();
        this.inputs.propertyType.values = this.api.getPropertyTypeOptions();
        this.checkMobile();
        window.onresize = (e) => {
            ngZone.run(() => {
                this.checkMobile();
            });
        }
    }
    checkMobile() {
        if(window.innerWidth < 768) {
            this.isMobile = true;
        } else {
            this.isMobile = false;
        }
    }
    getRates() {
        this.api.getRates(
            this.inputs.creditScore.currentValue,
            this.inputs.loanAmount.currentValue,
            this.inputs.loanPurpose.currentValue,
            this.inputs.propertyValue.currentValue,
            this.inputs.propertyType.currentValue,
            this.inputs.state.currentValue,
            this.inputs.county.currentValue
        ).then(rates => {
            this.loanTypes = rates;
            this.date = new Date(); // Assume that the current datetime is correct
            setTimeout(() => {
                this.animationState.house = 'appear';
                this.currentPage = 'detail';
                this.currentLoanType = this.loanTypes[0];
                this.currentLoanType.currentOption = this.currentLoanType.options[0];
                setTimeout(() => {
                    this.animationState.house = 'moveup';
                    setTimeout(() => {
                        this.animationState.page = 'active';
                    }, 500);
                }, 500);
            }, 2000);
        });
    }

    switchPage(forward:boolean) {
        this.hasSubmitted = true;
        if(this.checkValidation()) {
            if(forward) {
                if(this.isMobile) {
                    this.animationState.mobilePageHome = 'inactive';
                    setTimeout(() => {
                        this.animationState.mobilePage = 'details';
                        this.currentPage = 'loading';
                        setTimeout(() => {
                            this.animationState.mobilePageBack = 'active';
                        }, 200);
                    }, 200);
                } else {
                    this.currentPage = 'loading';
                }
                this.animationState.house = 'inactive';
                this.animationState.page = 'inactive';
                this.getRates();
            } else {
                this.currentPage = 'home';
                if(this.isMobile) {
                    this.animationState.mobilePageBack = 'inactive';
                    setTimeout(() => {
                        this.animationState.mobilePage = 'home';
                        setTimeout(() => {
                            this.animationState.mobilePageHome = 'active';
                        }, 200);
                    }, 200);
                }
            }
        }
    }
    checkValidation() {
        return (
            this.inputs.loanPurpose.currentValue !== false &&
            this.inputs.loanProduct.currentValue !== false &&
            this.inputs.state.currentValue !== false &&
            this.inputs.county.currentValue !== false &&
            this.inputs.creditScore.currentValue !== false &&
            this.inputs.propertyType.currentValue !== false &&
            this.inputs.loanAmount.currentValue !== '' &&
            this.inputs.propertyValue.currentValue !== ''
        );
    }
    switchTab(loanType) {
        this.currentLoanType = loanType;
        if(!this.currentLoanType.currentOption) {
            this.currentLoanType.currentOption = this.currentLoanType.options[0];
        }
    }
    switchOption(optionData) {
        for(var option of this.currentLoanType.options) {
            if(option[optionData.type] == optionData.value) {
                this.currentLoanType.currentOption = option;
            }
        }
    }
    getFeeByName(name) {
        if(
            typeof this.currentLoanType != 'undefined' &&
            typeof this.currentLoanType.currentOption != 'undefined'
        ) {
            for(var fee of this.currentLoanType.currentOption.Fees) {
                if(fee.Name == name) {
                    return fee.Amount;
                }
            }
        }
        return '';
    }
    getInputValueById(type, id) {
        for(var input of this.inputs[type].values) {
            if(input.id == id) {
                return input.name;
            }
        }
        return '';
    }
    getPointsOfLenderFee() {
        if(
            typeof this.currentLoanType != 'undefined' &&
            typeof this.currentLoanType.currentOption != 'undefined'
        ) {
            var price = this.currentLoanType.currentOption.Price
            var p = price ? 100 - price : 0;
            var l = this.inputs.loanAmount.currentValue ? this.inputs.loanAmount.currentValue : 0;
            var fee = (p * .01) * this.inputs.loanAmount.currentValue;
            return fee;
        } else {
            return 0;
        }
    }
    getLoanToValue() {
        var loanToValue = (
            parseFloat(this.inputs.loanAmount.currentValue) /
            parseFloat(this.inputs.propertyValue.currentValue)
        ) * 100;
        return loanToValue.toFixed(2) + '%';
    }
    setDropdown(type, value) {
        this.inputs[type].currentValue = value.id;
        if(this.inputs.state.currentValue !== this.inputs.county.currentState) {
            this.inputs.county.disabled = false;
            this.inputs.county.currentState = this.inputs.state.currentValue;
            this.inputs.county.values = this.api.getCountyOptionsByStateId(this.inputs.state.currentValue);
        }
    }
    validate(type) {
        if(this.hasSubmitted) {
            return !this.inputs[type].currentValue == false;
        }
        return true;
    }
}
